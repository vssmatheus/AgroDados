#include <SPI.h>
#include <Ethernet.h>

byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED
};

EthernetServer server(80);

void setup() {
  Serial.begin(9600);
  while (!Serial) {
  }
  Serial.println("Ethernet WebServer Example");
  //Ethernet.begin(mac, ip);
  Ethernet.begin(mac);
  
  Serial.print("Endereço IP: ");
  Serial.println(Ethernet.localIP());

  if (Ethernet.hardwareStatus() == EthernetNoHardware) {
    Serial.println("Ethernet shield was not found.  Sorry, can't run without hardware. :(");
    while (true) {
      delay(1);
    }
  }
  if (Ethernet.linkStatus() == LinkOFF) {
    Serial.println("Ethernet cable is not connected.");
  }

  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());
}


void loop() {
  EthernetClient client = server.available();
  if (client) {
    Serial.println("new client");
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read(); 
        Serial.write(c);
        if (c == '\n' && currentLineIsBlank) {
          int sensorUmidadeReading = analogRead(0); //LEITURA DO CANAL 0
          int sensorTemperaturaReading = analogRead(1); //LEITURA DO CANAL 1
          int sensorUmidadeArReading = analogRead(2); //LEITURA DO CANAL 2
          int sensorPressaoReading = analogRead(3); //LEITURA DO CANAL 3

          // converte numeros para porcentagem ou as unidades de medida
          float sensorUmidade = map(sensorUmidadeReading, 0, 1023, 0, 100);
          float sensorTemperatura = map(sensorTemperaturaReading, 0, 1023, 0, 38);
          float sensorUmidadeAr = map(sensorUmidadeArReading, 0, 1023, 0, 34);
          float sensorPressao = map(sensorPressaoReading, 0, 1023, 0, 100);

          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: application/json;charset=utf-8");
          client.println("Access-Control-Allow-Origin: *"); //permissões de CORS
          client.println("Connection: close");  // the connection will be closed after completion of the response
          client.println("Refresh: 5");  // refresh the page automatically every 5 sec
          client.println();
          client.println("{ \"analogData\": [{ \"type\": \"Umidade\", \"chanel\": 1, \"unidade_medida\": \"%\",  \"value\": ");
          client.println(sensorUmidade);
          client.println("}, {\"type\": \"Temperatura\", \"chanel\": 2, \"unidade_medida\": \"ºC\", \"value\": "); 
          client.println(sensorTemperatura);
          client.println("}, {\"type\": \"Umidade(Ar)\", \"chanel\": 3, \"unidade_medida\": \"%\", \"value\": "); 
          client.println(sensorUmidadeAr);
          client.println("}, {\"type\": \"Pressão\", \"chanel\": 4, \"unidade_medida\": \"N\", \"value\": "); 
          client.println(sensorPressao);
          client.println("}]}");
          break;
        }
        if (c == '\n') {
          currentLineIsBlank = true;
        } else if (c != '\r') {
          currentLineIsBlank = false;
        }
      }
    }
    delay(1);
    client.stop();
    Serial.println("client disconnected");
  }
}